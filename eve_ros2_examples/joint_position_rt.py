#!/usr/bin/env python3

import rclpy
import rclpy.qos
from halodi_msgs.msg import (
    JointName,
    JointSpaceCommand,
    WholeBodyState,
    WholeBodyControllerCommand
)
from rclpy.node import Node

def generate_joint_space_command_msg(
    joint_id, q_desired, qd_desired=0.0, qdd_desired=0.0
):
    """Generates a joint space command msg.
    This msg has additional gains fields. If you do not wish to set these yourself,
    please ensure that the use_default_gains bool is set to True.
    Msgs generated by this function have use_default_gains set to True.

    Parameters:
    - joint_id (enum): joint to be moved, e.g. JointName.NECK_PITCH
    - q_desired (float): desired final joint position
    - q_desired (float): desired final joint velocity. Default: 0.0
    - q_desired (float): desired final joint acceleration. Default: 0.0

    Returns: JointSpaceCommand msg
    """

    msg_ = JointSpaceCommand(joint=JointName(joint_id=joint_id), use_default_gains=True)

    # Maybe set some weaker PD gains, because the defaults are quite stiff. Why does this not work? What are the size of the units?
    # msg_.use_default_gains = False
    # msg_.stiffness = 0.5
    # msg_.damping = 0.5

    # Set references
    msg_.q_desired = q_desired
    msg_.qd_desired = qd_desired
    msg_.qdd_desired = qdd_desired

    return msg_


class WholeBodyCommandPublisher(Node):
    """A helper/example class to publish whole body controller messages.
    """

    def __init__(self, whole_body_command_msg=None):
        super().__init__(
            "joint_position_rt"
        )

        # Create publisher to send to WholeBodyControllerCommand
        self._publisher = self.create_publisher(
            WholeBodyControllerCommand, "/eve/whole_body_command", rclpy.qos.qos_profile_services_default
        )

        # Proper implementation waits for WholeBodyState's callback and then sends its WholeBodyControllerCommand
        self._subscriber = self.create_subscription(
            WholeBodyState, "/eve/whole_body_state", self.whole_body_state_cb, rclpy.qos.qos_profile_sensor_data
        )

        # Initialize from node's passed argument
        self._whole_body_command_msg = whole_body_command_msg

    def whole_body_state_cb(self, msg):
        self._publisher.publish(self._whole_body_command_msg)

def main():

    rclpy.init()  

    whole_body_command_msg_ = WholeBodyControllerCommand();

    # Manually set all reference positions, here to a kind off T-pose
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_SHOULDER_ROLL, -0.2
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_SHOULDER_PITCH, -0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_SHOULDER_YAW, -0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_ELBOW_PITCH, -0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_ELBOW_YAW, -0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_WRIST_ROLL, 0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.RIGHT_WRIST_PITCH, 0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_SHOULDER_ROLL, 0.2
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_SHOULDER_PITCH, 0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_SHOULDER_YAW, 0.0
        ))
        
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_ELBOW_PITCH, -0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_ELBOW_YAW, 0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_WRIST_ROLL, 0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.LEFT_WRIST_PITCH, 0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.NECK_PITCH, 0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.HIP_PITCH, 0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.HIP_ROLL, 0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.HIP_YAW, 0.0
        ))

    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.KNEE_PITCH ,0.0
        ))
        
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.ANKLE_PITCH, 0.0
        ))
    whole_body_command_msg_.joint_space_commands.append(generate_joint_space_command_msg(
        JointName.ANKLE_ROLL, 0.0
        ))

    node = WholeBodyCommandPublisher(whole_body_command_msg_)

    # Spin here keeps the script waiting for what its subscribed to instead of finishing
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
        
    rclpy.shutdown()

if __name__ == "__main__":
    main()
